#![doc = r" Remusys-MIR Instruction Opcode Definitions"]
#![doc = r" NOTE: This file is auto-generated from the RIG-DSL definitions."]
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub enum MirOP {
    #[doc = "Opcode class: CondBr"]
    BCond,
    BCCond,
    #[doc = "Opcode class: CBZs"]
    CBZ,
    CBNZ,
    #[doc = "Opcode class: UncondBr"]
    B,
    #[doc = "Opcode class: BReg"]
    Br,
    #[doc = "Opcode class: BLinkLabel"]
    BLink,
    #[doc = "Opcode class: BLinkReg"]
    BLinkReg,
    #[doc = "Opcode class: TBZ64"]
    TBZ64,
    TBNZ64,
    #[doc = "Opcode class: TBZ32"]
    TBZ32,
    TBNZ32,
    #[doc = "Opcode class: ICmp64R"]
    ICmp64R,
    ICmn64R,
    #[doc = "Opcode class: ICmp32R"]
    ICmp32R,
    ICmn32R,
    #[doc = "Opcode class: ICmp64I"]
    ICmp64I,
    ICmn64I,
    #[doc = "Opcode class: ICmp32I"]
    ICmp32I,
    ICmn32I,
    #[doc = "Opcode class: FCmp32"]
    FCmp32,
    FCmpE32,
    #[doc = "Opcode class: FCmp64"]
    FCmp64,
    FCmpE64,
    #[doc = "Opcode class: ICCmp64R"]
    ICCmp64R,
    ICCmn64R,
    #[doc = "Opcode class: ICCmp32R"]
    ICCmp32R,
    ICCmn32R,
    #[doc = "Opcode class: ICCmp64I"]
    ICCmp64I,
    ICCmn64I,
    #[doc = "Opcode class: ICCmp32I"]
    ICCmp32I,
    ICCmn32I,
    #[doc = "Opcode class: FCCmp32"]
    FCCmp32,
    FCCmpE32,
    #[doc = "Opcode class: FCCmp64"]
    FCCmp64,
    FCCmpE64,
    #[doc = "Opcode class: Bin64R"]
    Add64R,
    Sub64R,
    SMax64R,
    SMin64R,
    UMax64R,
    UMin64R,
    And64R,
    Bic64R,
    EON64R,
    EOR64R,
    ORR64R,
    ORN64R,
    Asr64R,
    Lsr64R,
    Lsl64R,
    Ror64R,
    Mul64,
    MNeg64,
    SDiv64,
    UDiv64,
    SMulH,
    UMulH,
    #[doc = "Opcode class: Bin32R"]
    Add32R,
    Sub32R,
    SMax32R,
    SMin32R,
    UMax32R,
    UMin32R,
    And32R,
    Bic32R,
    EON32R,
    EOR32R,
    ORR32R,
    ORN32R,
    Asr32R,
    Lsr32R,
    Lsl32R,
    Ror32R,
    Mul32,
    MNeg32,
    SDiv32,
    UDiv32,
    #[doc = "Opcode class: MulL"]
    SMULL,
    UMULL,
    SMNegL,
    UMNegL,
    #[doc = "Opcode class: Bin64RC"]
    Add64I,
    Sub64I,
    #[doc = "Opcode class: Bin32RC"]
    Add32I,
    Sub32I,
    #[doc = "Opcode class: Bin64RL"]
    And64I,
    Bic64I,
    EON64I,
    EOR64I,
    ORR64I,
    ORN64I,
    #[doc = "Opcode class: Bin32RL"]
    And32I,
    Bic32I,
    EON32I,
    EOR32I,
    ORR32I,
    ORN32I,
    #[doc = "Opcode class: Bin64RS"]
    SMax64I,
    SMin64I,
    #[doc = "Opcode class: Bin64RU"]
    UMax64I,
    UMin64I,
    #[doc = "Opcode class: Bin32RS"]
    SMax32I,
    SMin32I,
    #[doc = "Opcode class: Bin32RU"]
    UMax32I,
    UMin32I,
    #[doc = "Opcode class: Bin64RShift"]
    Asr64I,
    Lsr64I,
    Lsl64I,
    Ror64I,
    #[doc = "Opcode class: Bin32RShift"]
    Asr32I,
    Lsr32I,
    Lsl32I,
    Ror32I,
    #[doc = "Opcode class: BinF64R"]
    FAdd64,
    FDiv64,
    FMul64,
    FNMul64,
    FSub64,
    #[doc = "Opcode class: BinF32R"]
    FAdd32,
    FDiv32,
    FMul32,
    FNMul32,
    FSub32,
    #[doc = "Opcode class: MirCopy64"]
    MirCopy64,
    #[doc = "Opcode class: MirCopy32"]
    MirCopy32,
    #[doc = "Opcode class: MirFCopy64"]
    MirFCopy64,
    #[doc = "Opcode class: MirFCopy32"]
    MirFCopy32,
    #[doc = "Opcode class: MirPCopy"]
    MirPCopy,
    #[doc = "Opcode class: Una64R"]
    Neg64R,
    MVN64R,
    Mov64R,
    Abs64R,
    CLS64,
    CLZ64,
    CNT64,
    CTZ64,
    RBit64,
    #[doc = "Opcode class: Una32R"]
    Neg32R,
    MVN32R,
    Mov32R,
    Abs32R,
    CLS32,
    CLZ32,
    CNT32,
    CTZ32,
    RBit32,
    SXTB32,
    SXTH32,
    SXTW32,
    UXTB32,
    UXTH32,
    #[doc = "Opcode class: ExtR"]
    SXTB64,
    SXTH64,
    SXTW64,
    UXTB64,
    UXTH64,
    #[doc = "Opcode class: Mov64I"]
    Mov64I,
    MovZ64,
    MovN64,
    MovK64,
    #[doc = "Opcode class: Mov32I"]
    Mov32I,
    MovZ32,
    MovN32,
    MovK32,
    #[doc = "Opcode class: Adr"]
    AdrP,
    Adr,
    #[doc = "Opcode class: UnaFG64"]
    FMovFG64,
    SCvtF64,
    UCvtF64,
    #[doc = "Opcode class: UnaGF64"]
    FMovGF64,
    FCvtAS64,
    FCvtAU64,
    FCvtMS64,
    FCvtMU64,
    FCvtNS64,
    FCvtNU64,
    FCvtPS64,
    FCvtPU64,
    FCvtZS64,
    FCvtZU64,
    #[doc = "Opcode class: UnaF64G32"]
    SCvtF64G32,
    UCvtF64G32,
    #[doc = "Opcode class: UnaFG32"]
    FMovFG32,
    SCvtF32,
    UCvtF32,
    #[doc = "Opcode class: UnaF32G64"]
    SCvtF32G64,
    UCvtF32G64,
    #[doc = "Opcode class: UnaGF32"]
    FMovGF32,
    FCvtAS32,
    FCvtAU32,
    FCvtMS32,
    FCvtMU32,
    FCvtNS32,
    FCvtNU32,
    FCvtPS32,
    FCvtPU32,
    FCvtZS32,
    FCvtZU32,
    #[doc = "Opcode class: UnaG64F32"]
    FCvtAS64F32,
    FCvtAU64F32,
    FCvtMS64F32,
    FCvtMU64F32,
    FCvtNS64F32,
    FCvtNU64F32,
    FCvtPS64F32,
    FCvtPU64F32,
    FCvtZS64F32,
    FCvtZU64F32,
    #[doc = "Opcode class: UnaG32F64"]
    FCvtAS32F64,
    FCvtAU32F64,
    #[doc = "Opcode class: UnaF64"]
    FMov64R,
    FRIntA64,
    FRIntI64,
    FRIntM64,
    FRIntN64,
    FRIntP64,
    FRIntX64,
    FRIntZ64,
    FRInt32X64,
    FRIntZ32X64,
    FRInt64X64,
    FRIntZ64X64,
    FAbs64,
    FNeg64,
    FSqrt64,
    #[doc = "Opcode class: UnaF32"]
    FMov32R,
    FRIntA32,
    FRIntI32,
    FRIntM32,
    FRIntN32,
    FRIntP32,
    FRIntX32,
    FRIntZ32,
    FRInt32X32,
    FRIntZ32X32,
    FRInt64X32,
    FRIntZ64X32,
    FAbs32,
    FNeg32,
    FSqrt32,
    #[doc = "Opcode class: UnaryF32F64"]
    FCvt32F64,
    #[doc = "Opcode class: UnaryF64F32"]
    FCvt64F32,
    #[doc = "Opcode class: FMov64I"]
    FMov64I,
    #[doc = "Opcode class: FMov32I"]
    FMov32I,
    #[doc = "Opcode class: TenaryG64"]
    MAdd64,
    MSub64,
    #[doc = "Opcode class: TenaryG64G32"]
    SMAddL,
    SMSubL,
    UMAddL,
    UMSubL,
    #[doc = "Opcode class: TenaryG32"]
    MAdd32,
    MSub32,
    #[doc = "Opcode class: TenaryF64"]
    FMAdd64,
    FMSub64,
    FNMAdd64,
    FNMSub64,
    #[doc = "Opcode class: TenaryF32"]
    FMAdd32,
    FMSub32,
    FNMAdd32,
    FNMSub32,
    #[doc = "Opcode class: LoadStoreGr64"]
    LdrGr64,
    LdrBGr64,
    LdrHGr64,
    LdrSBGr64,
    LdrSHGr64,
    StrGr64,
    StrBGr64,
    StrHGr64,
    #[doc = "Opcode class: LoadStoreGr32"]
    LdrGr32,
    LdrBGr32,
    LdrHGr32,
    LdrSBGr32,
    LdrSHGr32,
    StrGr32,
    StrBGr32,
    StrHGr32,
    #[doc = "Opcode class: LoadStoreF64"]
    LdrF64,
    StrF64,
    #[doc = "Opcode class: LoadStoreF32"]
    LdrF32,
    StrF32,
    #[doc = "Opcode class: LoadStoreGr64Base"]
    LdrGr64Base,
    LdrBGr64Base,
    LdrHGr64Base,
    LdrSBGr64Base,
    LdrSHGr64Base,
    StrGr64Base,
    StrBGr64Base,
    StrHGr64Base,
    #[doc = "Opcode class: LoadStoreGr32Base"]
    LdrGr32Base,
    LdrBGr32Base,
    LdrHGr32Base,
    LdrSBGr32Base,
    LdrSHGr32Base,
    StrGr32Base,
    StrBGr32Base,
    StrHGr32Base,
    #[doc = "Opcode class: LoadStoreF64Base"]
    LdrF64Base,
    StrF64Base,
    #[doc = "Opcode class: LoadStoreF32Base"]
    LdrF32Base,
    StrF32Base,
    #[doc = "Opcode class: LoadStoreGr64Indexed"]
    LdrGr64Indexed,
    LdrBGr64Indexed,
    LdrHGr64Indexed,
    LdrSBGr64Indexed,
    LdrSHGr64Indexed,
    StrGr64Indexed,
    StrBGr64Indexed,
    StrHGr64Indexed,
    #[doc = "Opcode class: LoadStoreGr32Indexed"]
    LdrGr32Indexed,
    LdrBGr32Indexed,
    LdrHGr32Indexed,
    LdrSBGr32Indexed,
    LdrSHGr32Indexed,
    StrGr32Indexed,
    StrBGr32Indexed,
    StrHGr32Indexed,
    #[doc = "Opcode class: LoadStoreF64Indexed"]
    LdrF64Indexed,
    StrF64Indexed,
    #[doc = "Opcode class: LoadStoreF32Indexed"]
    LdrF32Indexed,
    StrF32Indexed,
    #[doc = "Opcode class: LoadStoreGr64Literal"]
    LdrGr64Literal,
    LdrBGr64Literal,
    LdrHGr64Literal,
    LdrSBGr64Literal,
    LdrSHGr64Literal,
    StrGr64Literal,
    StrBGr64Literal,
    StrHGr64Literal,
    #[doc = "Opcode class: LoadStoreGr32Literal"]
    LdrGr32Literal,
    LdrBGr32Literal,
    LdrHGr32Literal,
    LdrSBGr32Literal,
    LdrSHGr32Literal,
    StrGr32Literal,
    StrBGr32Literal,
    StrHGr32Literal,
    #[doc = "Opcode class: LoadStoreF64Literal"]
    LdrF64Literal,
    StrF64Literal,
    #[doc = "Opcode class: LoadStoreF32Literal"]
    LdrF32Literal,
    StrF32Literal,
    #[doc = "Opcode class: LoadConst64"]
    LoadConst64,
    #[doc = "Opcode class: LoadConstF64"]
    LoadConstF64,
    #[doc = "Opcode class: LoadConst64Symbol"]
    LoadConst64Symbol,
    #[doc = "Opcode class: MirCall"]
    MirCall,
    #[doc = "Opcode class: MirReturn"]
    MirReturn,
    #[doc = "Opcode class: MirSwitch"]
    MirSwitch,
}
impl MirOP {
    pub fn as_str(&self) -> &'static str {
        match self {
            MirOP::BCond => "BCond",
            MirOP::BCCond => "BCCond",
            MirOP::CBZ => "CBZ",
            MirOP::CBNZ => "CBNZ",
            MirOP::B => "B",
            MirOP::Br => "Br",
            MirOP::BLink => "BLink",
            MirOP::BLinkReg => "BLinkReg",
            MirOP::TBZ64 => "TBZ64",
            MirOP::TBNZ64 => "TBNZ64",
            MirOP::TBZ32 => "TBZ32",
            MirOP::TBNZ32 => "TBNZ32",
            MirOP::ICmp64R => "ICmp64R",
            MirOP::ICmn64R => "ICmn64R",
            MirOP::ICmp32R => "ICmp32R",
            MirOP::ICmn32R => "ICmn32R",
            MirOP::ICmp64I => "ICmp64I",
            MirOP::ICmn64I => "ICmn64I",
            MirOP::ICmp32I => "ICmp32I",
            MirOP::ICmn32I => "ICmn32I",
            MirOP::FCmp32 => "FCmp32",
            MirOP::FCmpE32 => "FCmpE32",
            MirOP::FCmp64 => "FCmp64",
            MirOP::FCmpE64 => "FCmpE64",
            MirOP::ICCmp64R => "ICCmp64R",
            MirOP::ICCmn64R => "ICCmn64R",
            MirOP::ICCmp32R => "ICCmp32R",
            MirOP::ICCmn32R => "ICCmn32R",
            MirOP::ICCmp64I => "ICCmp64I",
            MirOP::ICCmn64I => "ICCmn64I",
            MirOP::ICCmp32I => "ICCmp32I",
            MirOP::ICCmn32I => "ICCmn32I",
            MirOP::FCCmp32 => "FCCmp32",
            MirOP::FCCmpE32 => "FCCmpE32",
            MirOP::FCCmp64 => "FCCmp64",
            MirOP::FCCmpE64 => "FCCmpE64",
            MirOP::Add64R => "Add64R",
            MirOP::Sub64R => "Sub64R",
            MirOP::SMax64R => "SMax64R",
            MirOP::SMin64R => "SMin64R",
            MirOP::UMax64R => "UMax64R",
            MirOP::UMin64R => "UMin64R",
            MirOP::And64R => "And64R",
            MirOP::Bic64R => "Bic64R",
            MirOP::EON64R => "EON64R",
            MirOP::EOR64R => "EOR64R",
            MirOP::ORR64R => "ORR64R",
            MirOP::ORN64R => "ORN64R",
            MirOP::Asr64R => "Asr64R",
            MirOP::Lsr64R => "Lsr64R",
            MirOP::Lsl64R => "Lsl64R",
            MirOP::Ror64R => "Ror64R",
            MirOP::Mul64 => "Mul64",
            MirOP::MNeg64 => "MNeg64",
            MirOP::SDiv64 => "SDiv64",
            MirOP::UDiv64 => "UDiv64",
            MirOP::SMulH => "SMulH",
            MirOP::UMulH => "UMulH",
            MirOP::Add32R => "Add32R",
            MirOP::Sub32R => "Sub32R",
            MirOP::SMax32R => "SMax32R",
            MirOP::SMin32R => "SMin32R",
            MirOP::UMax32R => "UMax32R",
            MirOP::UMin32R => "UMin32R",
            MirOP::And32R => "And32R",
            MirOP::Bic32R => "Bic32R",
            MirOP::EON32R => "EON32R",
            MirOP::EOR32R => "EOR32R",
            MirOP::ORR32R => "ORR32R",
            MirOP::ORN32R => "ORN32R",
            MirOP::Asr32R => "Asr32R",
            MirOP::Lsr32R => "Lsr32R",
            MirOP::Lsl32R => "Lsl32R",
            MirOP::Ror32R => "Ror32R",
            MirOP::Mul32 => "Mul32",
            MirOP::MNeg32 => "MNeg32",
            MirOP::SDiv32 => "SDiv32",
            MirOP::UDiv32 => "UDiv32",
            MirOP::SMULL => "SMULL",
            MirOP::UMULL => "UMULL",
            MirOP::SMNegL => "SMNegL",
            MirOP::UMNegL => "UMNegL",
            MirOP::Add64I => "Add64I",
            MirOP::Sub64I => "Sub64I",
            MirOP::Add32I => "Add32I",
            MirOP::Sub32I => "Sub32I",
            MirOP::And64I => "And64I",
            MirOP::Bic64I => "Bic64I",
            MirOP::EON64I => "EON64I",
            MirOP::EOR64I => "EOR64I",
            MirOP::ORR64I => "ORR64I",
            MirOP::ORN64I => "ORN64I",
            MirOP::And32I => "And32I",
            MirOP::Bic32I => "Bic32I",
            MirOP::EON32I => "EON32I",
            MirOP::EOR32I => "EOR32I",
            MirOP::ORR32I => "ORR32I",
            MirOP::ORN32I => "ORN32I",
            MirOP::SMax64I => "SMax64I",
            MirOP::SMin64I => "SMin64I",
            MirOP::UMax64I => "UMax64I",
            MirOP::UMin64I => "UMin64I",
            MirOP::SMax32I => "SMax32I",
            MirOP::SMin32I => "SMin32I",
            MirOP::UMax32I => "UMax32I",
            MirOP::UMin32I => "UMin32I",
            MirOP::Asr64I => "Asr64I",
            MirOP::Lsr64I => "Lsr64I",
            MirOP::Lsl64I => "Lsl64I",
            MirOP::Ror64I => "Ror64I",
            MirOP::Asr32I => "Asr32I",
            MirOP::Lsr32I => "Lsr32I",
            MirOP::Lsl32I => "Lsl32I",
            MirOP::Ror32I => "Ror32I",
            MirOP::FAdd64 => "FAdd64",
            MirOP::FDiv64 => "FDiv64",
            MirOP::FMul64 => "FMul64",
            MirOP::FNMul64 => "FNMul64",
            MirOP::FSub64 => "FSub64",
            MirOP::FAdd32 => "FAdd32",
            MirOP::FDiv32 => "FDiv32",
            MirOP::FMul32 => "FMul32",
            MirOP::FNMul32 => "FNMul32",
            MirOP::FSub32 => "FSub32",
            MirOP::MirCopy64 => "MirCopy64",
            MirOP::MirCopy32 => "MirCopy32",
            MirOP::MirFCopy64 => "MirFCopy64",
            MirOP::MirFCopy32 => "MirFCopy32",
            MirOP::MirPCopy => "MirPCopy",
            MirOP::Neg64R => "Neg64R",
            MirOP::MVN64R => "MVN64R",
            MirOP::Mov64R => "Mov64R",
            MirOP::Abs64R => "Abs64R",
            MirOP::CLS64 => "CLS64",
            MirOP::CLZ64 => "CLZ64",
            MirOP::CNT64 => "CNT64",
            MirOP::CTZ64 => "CTZ64",
            MirOP::RBit64 => "RBit64",
            MirOP::Neg32R => "Neg32R",
            MirOP::MVN32R => "MVN32R",
            MirOP::Mov32R => "Mov32R",
            MirOP::Abs32R => "Abs32R",
            MirOP::CLS32 => "CLS32",
            MirOP::CLZ32 => "CLZ32",
            MirOP::CNT32 => "CNT32",
            MirOP::CTZ32 => "CTZ32",
            MirOP::RBit32 => "RBit32",
            MirOP::SXTB32 => "SXTB32",
            MirOP::SXTH32 => "SXTH32",
            MirOP::SXTW32 => "SXTW32",
            MirOP::UXTB32 => "UXTB32",
            MirOP::UXTH32 => "UXTH32",
            MirOP::SXTB64 => "SXTB64",
            MirOP::SXTH64 => "SXTH64",
            MirOP::SXTW64 => "SXTW64",
            MirOP::UXTB64 => "UXTB64",
            MirOP::UXTH64 => "UXTH64",
            MirOP::Mov64I => "Mov64I",
            MirOP::MovZ64 => "MovZ64",
            MirOP::MovN64 => "MovN64",
            MirOP::MovK64 => "MovK64",
            MirOP::Mov32I => "Mov32I",
            MirOP::MovZ32 => "MovZ32",
            MirOP::MovN32 => "MovN32",
            MirOP::MovK32 => "MovK32",
            MirOP::AdrP => "AdrP",
            MirOP::Adr => "Adr",
            MirOP::FMovFG64 => "FMovFG64",
            MirOP::SCvtF64 => "SCvtF64",
            MirOP::UCvtF64 => "UCvtF64",
            MirOP::FMovGF64 => "FMovGF64",
            MirOP::FCvtAS64 => "FCvtAS64",
            MirOP::FCvtAU64 => "FCvtAU64",
            MirOP::FCvtMS64 => "FCvtMS64",
            MirOP::FCvtMU64 => "FCvtMU64",
            MirOP::FCvtNS64 => "FCvtNS64",
            MirOP::FCvtNU64 => "FCvtNU64",
            MirOP::FCvtPS64 => "FCvtPS64",
            MirOP::FCvtPU64 => "FCvtPU64",
            MirOP::FCvtZS64 => "FCvtZS64",
            MirOP::FCvtZU64 => "FCvtZU64",
            MirOP::SCvtF64G32 => "SCvtF64G32",
            MirOP::UCvtF64G32 => "UCvtF64G32",
            MirOP::FMovFG32 => "FMovFG32",
            MirOP::SCvtF32 => "SCvtF32",
            MirOP::UCvtF32 => "UCvtF32",
            MirOP::SCvtF32G64 => "SCvtF32G64",
            MirOP::UCvtF32G64 => "UCvtF32G64",
            MirOP::FMovGF32 => "FMovGF32",
            MirOP::FCvtAS32 => "FCvtAS32",
            MirOP::FCvtAU32 => "FCvtAU32",
            MirOP::FCvtMS32 => "FCvtMS32",
            MirOP::FCvtMU32 => "FCvtMU32",
            MirOP::FCvtNS32 => "FCvtNS32",
            MirOP::FCvtNU32 => "FCvtNU32",
            MirOP::FCvtPS32 => "FCvtPS32",
            MirOP::FCvtPU32 => "FCvtPU32",
            MirOP::FCvtZS32 => "FCvtZS32",
            MirOP::FCvtZU32 => "FCvtZU32",
            MirOP::FCvtAS64F32 => "FCvtAS64F32",
            MirOP::FCvtAU64F32 => "FCvtAU64F32",
            MirOP::FCvtMS64F32 => "FCvtMS64F32",
            MirOP::FCvtMU64F32 => "FCvtMU64F32",
            MirOP::FCvtNS64F32 => "FCvtNS64F32",
            MirOP::FCvtNU64F32 => "FCvtNU64F32",
            MirOP::FCvtPS64F32 => "FCvtPS64F32",
            MirOP::FCvtPU64F32 => "FCvtPU64F32",
            MirOP::FCvtZS64F32 => "FCvtZS64F32",
            MirOP::FCvtZU64F32 => "FCvtZU64F32",
            MirOP::FCvtAS32F64 => "FCvtAS32F64",
            MirOP::FCvtAU32F64 => "FCvtAU32F64",
            MirOP::FMov64R => "FMov64R",
            MirOP::FRIntA64 => "FRIntA64",
            MirOP::FRIntI64 => "FRIntI64",
            MirOP::FRIntM64 => "FRIntM64",
            MirOP::FRIntN64 => "FRIntN64",
            MirOP::FRIntP64 => "FRIntP64",
            MirOP::FRIntX64 => "FRIntX64",
            MirOP::FRIntZ64 => "FRIntZ64",
            MirOP::FRInt32X64 => "FRInt32X64",
            MirOP::FRIntZ32X64 => "FRIntZ32X64",
            MirOP::FRInt64X64 => "FRInt64X64",
            MirOP::FRIntZ64X64 => "FRIntZ64X64",
            MirOP::FAbs64 => "FAbs64",
            MirOP::FNeg64 => "FNeg64",
            MirOP::FSqrt64 => "FSqrt64",
            MirOP::FMov32R => "FMov32R",
            MirOP::FRIntA32 => "FRIntA32",
            MirOP::FRIntI32 => "FRIntI32",
            MirOP::FRIntM32 => "FRIntM32",
            MirOP::FRIntN32 => "FRIntN32",
            MirOP::FRIntP32 => "FRIntP32",
            MirOP::FRIntX32 => "FRIntX32",
            MirOP::FRIntZ32 => "FRIntZ32",
            MirOP::FRInt32X32 => "FRInt32X32",
            MirOP::FRIntZ32X32 => "FRIntZ32X32",
            MirOP::FRInt64X32 => "FRInt64X32",
            MirOP::FRIntZ64X32 => "FRIntZ64X32",
            MirOP::FAbs32 => "FAbs32",
            MirOP::FNeg32 => "FNeg32",
            MirOP::FSqrt32 => "FSqrt32",
            MirOP::FCvt32F64 => "FCvt32F64",
            MirOP::FCvt64F32 => "FCvt64F32",
            MirOP::FMov64I => "FMov64I",
            MirOP::FMov32I => "FMov32I",
            MirOP::MAdd64 => "MAdd64",
            MirOP::MSub64 => "MSub64",
            MirOP::SMAddL => "SMAddL",
            MirOP::SMSubL => "SMSubL",
            MirOP::UMAddL => "UMAddL",
            MirOP::UMSubL => "UMSubL",
            MirOP::MAdd32 => "MAdd32",
            MirOP::MSub32 => "MSub32",
            MirOP::FMAdd64 => "FMAdd64",
            MirOP::FMSub64 => "FMSub64",
            MirOP::FNMAdd64 => "FNMAdd64",
            MirOP::FNMSub64 => "FNMSub64",
            MirOP::FMAdd32 => "FMAdd32",
            MirOP::FMSub32 => "FMSub32",
            MirOP::FNMAdd32 => "FNMAdd32",
            MirOP::FNMSub32 => "FNMSub32",
            MirOP::LdrGr64 => "LdrGr64",
            MirOP::LdrBGr64 => "LdrBGr64",
            MirOP::LdrHGr64 => "LdrHGr64",
            MirOP::LdrSBGr64 => "LdrSBGr64",
            MirOP::LdrSHGr64 => "LdrSHGr64",
            MirOP::StrGr64 => "StrGr64",
            MirOP::StrBGr64 => "StrBGr64",
            MirOP::StrHGr64 => "StrHGr64",
            MirOP::LdrGr32 => "LdrGr32",
            MirOP::LdrBGr32 => "LdrBGr32",
            MirOP::LdrHGr32 => "LdrHGr32",
            MirOP::LdrSBGr32 => "LdrSBGr32",
            MirOP::LdrSHGr32 => "LdrSHGr32",
            MirOP::StrGr32 => "StrGr32",
            MirOP::StrBGr32 => "StrBGr32",
            MirOP::StrHGr32 => "StrHGr32",
            MirOP::LdrF64 => "LdrF64",
            MirOP::StrF64 => "StrF64",
            MirOP::LdrF32 => "LdrF32",
            MirOP::StrF32 => "StrF32",
            MirOP::LdrGr64Base => "LdrGr64Base",
            MirOP::LdrBGr64Base => "LdrBGr64Base",
            MirOP::LdrHGr64Base => "LdrHGr64Base",
            MirOP::LdrSBGr64Base => "LdrSBGr64Base",
            MirOP::LdrSHGr64Base => "LdrSHGr64Base",
            MirOP::StrGr64Base => "StrGr64Base",
            MirOP::StrBGr64Base => "StrBGr64Base",
            MirOP::StrHGr64Base => "StrHGr64Base",
            MirOP::LdrGr32Base => "LdrGr32Base",
            MirOP::LdrBGr32Base => "LdrBGr32Base",
            MirOP::LdrHGr32Base => "LdrHGr32Base",
            MirOP::LdrSBGr32Base => "LdrSBGr32Base",
            MirOP::LdrSHGr32Base => "LdrSHGr32Base",
            MirOP::StrGr32Base => "StrGr32Base",
            MirOP::StrBGr32Base => "StrBGr32Base",
            MirOP::StrHGr32Base => "StrHGr32Base",
            MirOP::LdrF64Base => "LdrF64Base",
            MirOP::StrF64Base => "StrF64Base",
            MirOP::LdrF32Base => "LdrF32Base",
            MirOP::StrF32Base => "StrF32Base",
            MirOP::LdrGr64Indexed => "LdrGr64Indexed",
            MirOP::LdrBGr64Indexed => "LdrBGr64Indexed",
            MirOP::LdrHGr64Indexed => "LdrHGr64Indexed",
            MirOP::LdrSBGr64Indexed => "LdrSBGr64Indexed",
            MirOP::LdrSHGr64Indexed => "LdrSHGr64Indexed",
            MirOP::StrGr64Indexed => "StrGr64Indexed",
            MirOP::StrBGr64Indexed => "StrBGr64Indexed",
            MirOP::StrHGr64Indexed => "StrHGr64Indexed",
            MirOP::LdrGr32Indexed => "LdrGr32Indexed",
            MirOP::LdrBGr32Indexed => "LdrBGr32Indexed",
            MirOP::LdrHGr32Indexed => "LdrHGr32Indexed",
            MirOP::LdrSBGr32Indexed => "LdrSBGr32Indexed",
            MirOP::LdrSHGr32Indexed => "LdrSHGr32Indexed",
            MirOP::StrGr32Indexed => "StrGr32Indexed",
            MirOP::StrBGr32Indexed => "StrBGr32Indexed",
            MirOP::StrHGr32Indexed => "StrHGr32Indexed",
            MirOP::LdrF64Indexed => "LdrF64Indexed",
            MirOP::StrF64Indexed => "StrF64Indexed",
            MirOP::LdrF32Indexed => "LdrF32Indexed",
            MirOP::StrF32Indexed => "StrF32Indexed",
            MirOP::LdrGr64Literal => "LdrGr64Literal",
            MirOP::LdrBGr64Literal => "LdrBGr64Literal",
            MirOP::LdrHGr64Literal => "LdrHGr64Literal",
            MirOP::LdrSBGr64Literal => "LdrSBGr64Literal",
            MirOP::LdrSHGr64Literal => "LdrSHGr64Literal",
            MirOP::StrGr64Literal => "StrGr64Literal",
            MirOP::StrBGr64Literal => "StrBGr64Literal",
            MirOP::StrHGr64Literal => "StrHGr64Literal",
            MirOP::LdrGr32Literal => "LdrGr32Literal",
            MirOP::LdrBGr32Literal => "LdrBGr32Literal",
            MirOP::LdrHGr32Literal => "LdrHGr32Literal",
            MirOP::LdrSBGr32Literal => "LdrSBGr32Literal",
            MirOP::LdrSHGr32Literal => "LdrSHGr32Literal",
            MirOP::StrGr32Literal => "StrGr32Literal",
            MirOP::StrBGr32Literal => "StrBGr32Literal",
            MirOP::StrHGr32Literal => "StrHGr32Literal",
            MirOP::LdrF64Literal => "LdrF64Literal",
            MirOP::StrF64Literal => "StrF64Literal",
            MirOP::LdrF32Literal => "LdrF32Literal",
            MirOP::StrF32Literal => "StrF32Literal",
            MirOP::LoadConst64 => "LoadConst64",
            MirOP::LoadConstF64 => "LoadConstF64",
            MirOP::LoadConst64Symbol => "LoadConst64Symbol",
            MirOP::MirCall => "MirCall",
            MirOP::MirReturn => "MirReturn",
            MirOP::MirSwitch => "MirSwitch",
        }
    }
}
impl std::fmt::Display for MirOP {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}", self.as_str())
    }
}
impl std::str::FromStr for MirOP {
    type Err = String;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "BCond" => Ok(MirOP::BCond),
            "BCCond" => Ok(MirOP::BCCond),
            "CBZ" => Ok(MirOP::CBZ),
            "CBNZ" => Ok(MirOP::CBNZ),
            "B" => Ok(MirOP::B),
            "Br" => Ok(MirOP::Br),
            "BLink" => Ok(MirOP::BLink),
            "BLinkReg" => Ok(MirOP::BLinkReg),
            "TBZ64" => Ok(MirOP::TBZ64),
            "TBNZ64" => Ok(MirOP::TBNZ64),
            "TBZ32" => Ok(MirOP::TBZ32),
            "TBNZ32" => Ok(MirOP::TBNZ32),
            "ICmp64R" => Ok(MirOP::ICmp64R),
            "ICmn64R" => Ok(MirOP::ICmn64R),
            "ICmp32R" => Ok(MirOP::ICmp32R),
            "ICmn32R" => Ok(MirOP::ICmn32R),
            "ICmp64I" => Ok(MirOP::ICmp64I),
            "ICmn64I" => Ok(MirOP::ICmn64I),
            "ICmp32I" => Ok(MirOP::ICmp32I),
            "ICmn32I" => Ok(MirOP::ICmn32I),
            "FCmp32" => Ok(MirOP::FCmp32),
            "FCmpE32" => Ok(MirOP::FCmpE32),
            "FCmp64" => Ok(MirOP::FCmp64),
            "FCmpE64" => Ok(MirOP::FCmpE64),
            "ICCmp64R" => Ok(MirOP::ICCmp64R),
            "ICCmn64R" => Ok(MirOP::ICCmn64R),
            "ICCmp32R" => Ok(MirOP::ICCmp32R),
            "ICCmn32R" => Ok(MirOP::ICCmn32R),
            "ICCmp64I" => Ok(MirOP::ICCmp64I),
            "ICCmn64I" => Ok(MirOP::ICCmn64I),
            "ICCmp32I" => Ok(MirOP::ICCmp32I),
            "ICCmn32I" => Ok(MirOP::ICCmn32I),
            "FCCmp32" => Ok(MirOP::FCCmp32),
            "FCCmpE32" => Ok(MirOP::FCCmpE32),
            "FCCmp64" => Ok(MirOP::FCCmp64),
            "FCCmpE64" => Ok(MirOP::FCCmpE64),
            "Add64R" => Ok(MirOP::Add64R),
            "Sub64R" => Ok(MirOP::Sub64R),
            "SMax64R" => Ok(MirOP::SMax64R),
            "SMin64R" => Ok(MirOP::SMin64R),
            "UMax64R" => Ok(MirOP::UMax64R),
            "UMin64R" => Ok(MirOP::UMin64R),
            "And64R" => Ok(MirOP::And64R),
            "Bic64R" => Ok(MirOP::Bic64R),
            "EON64R" => Ok(MirOP::EON64R),
            "EOR64R" => Ok(MirOP::EOR64R),
            "ORR64R" => Ok(MirOP::ORR64R),
            "ORN64R" => Ok(MirOP::ORN64R),
            "Asr64R" => Ok(MirOP::Asr64R),
            "Lsr64R" => Ok(MirOP::Lsr64R),
            "Lsl64R" => Ok(MirOP::Lsl64R),
            "Ror64R" => Ok(MirOP::Ror64R),
            "Mul64" => Ok(MirOP::Mul64),
            "MNeg64" => Ok(MirOP::MNeg64),
            "SDiv64" => Ok(MirOP::SDiv64),
            "UDiv64" => Ok(MirOP::UDiv64),
            "SMulH" => Ok(MirOP::SMulH),
            "UMulH" => Ok(MirOP::UMulH),
            "Add32R" => Ok(MirOP::Add32R),
            "Sub32R" => Ok(MirOP::Sub32R),
            "SMax32R" => Ok(MirOP::SMax32R),
            "SMin32R" => Ok(MirOP::SMin32R),
            "UMax32R" => Ok(MirOP::UMax32R),
            "UMin32R" => Ok(MirOP::UMin32R),
            "And32R" => Ok(MirOP::And32R),
            "Bic32R" => Ok(MirOP::Bic32R),
            "EON32R" => Ok(MirOP::EON32R),
            "EOR32R" => Ok(MirOP::EOR32R),
            "ORR32R" => Ok(MirOP::ORR32R),
            "ORN32R" => Ok(MirOP::ORN32R),
            "Asr32R" => Ok(MirOP::Asr32R),
            "Lsr32R" => Ok(MirOP::Lsr32R),
            "Lsl32R" => Ok(MirOP::Lsl32R),
            "Ror32R" => Ok(MirOP::Ror32R),
            "Mul32" => Ok(MirOP::Mul32),
            "MNeg32" => Ok(MirOP::MNeg32),
            "SDiv32" => Ok(MirOP::SDiv32),
            "UDiv32" => Ok(MirOP::UDiv32),
            "SMULL" => Ok(MirOP::SMULL),
            "UMULL" => Ok(MirOP::UMULL),
            "SMNegL" => Ok(MirOP::SMNegL),
            "UMNegL" => Ok(MirOP::UMNegL),
            "Add64I" => Ok(MirOP::Add64I),
            "Sub64I" => Ok(MirOP::Sub64I),
            "Add32I" => Ok(MirOP::Add32I),
            "Sub32I" => Ok(MirOP::Sub32I),
            "And64I" => Ok(MirOP::And64I),
            "Bic64I" => Ok(MirOP::Bic64I),
            "EON64I" => Ok(MirOP::EON64I),
            "EOR64I" => Ok(MirOP::EOR64I),
            "ORR64I" => Ok(MirOP::ORR64I),
            "ORN64I" => Ok(MirOP::ORN64I),
            "And32I" => Ok(MirOP::And32I),
            "Bic32I" => Ok(MirOP::Bic32I),
            "EON32I" => Ok(MirOP::EON32I),
            "EOR32I" => Ok(MirOP::EOR32I),
            "ORR32I" => Ok(MirOP::ORR32I),
            "ORN32I" => Ok(MirOP::ORN32I),
            "SMax64I" => Ok(MirOP::SMax64I),
            "SMin64I" => Ok(MirOP::SMin64I),
            "UMax64I" => Ok(MirOP::UMax64I),
            "UMin64I" => Ok(MirOP::UMin64I),
            "SMax32I" => Ok(MirOP::SMax32I),
            "SMin32I" => Ok(MirOP::SMin32I),
            "UMax32I" => Ok(MirOP::UMax32I),
            "UMin32I" => Ok(MirOP::UMin32I),
            "Asr64I" => Ok(MirOP::Asr64I),
            "Lsr64I" => Ok(MirOP::Lsr64I),
            "Lsl64I" => Ok(MirOP::Lsl64I),
            "Ror64I" => Ok(MirOP::Ror64I),
            "Asr32I" => Ok(MirOP::Asr32I),
            "Lsr32I" => Ok(MirOP::Lsr32I),
            "Lsl32I" => Ok(MirOP::Lsl32I),
            "Ror32I" => Ok(MirOP::Ror32I),
            "FAdd64" => Ok(MirOP::FAdd64),
            "FDiv64" => Ok(MirOP::FDiv64),
            "FMul64" => Ok(MirOP::FMul64),
            "FNMul64" => Ok(MirOP::FNMul64),
            "FSub64" => Ok(MirOP::FSub64),
            "FAdd32" => Ok(MirOP::FAdd32),
            "FDiv32" => Ok(MirOP::FDiv32),
            "FMul32" => Ok(MirOP::FMul32),
            "FNMul32" => Ok(MirOP::FNMul32),
            "FSub32" => Ok(MirOP::FSub32),
            "MirCopy64" => Ok(MirOP::MirCopy64),
            "MirCopy32" => Ok(MirOP::MirCopy32),
            "MirFCopy64" => Ok(MirOP::MirFCopy64),
            "MirFCopy32" => Ok(MirOP::MirFCopy32),
            "MirPCopy" => Ok(MirOP::MirPCopy),
            "Neg64R" => Ok(MirOP::Neg64R),
            "MVN64R" => Ok(MirOP::MVN64R),
            "Mov64R" => Ok(MirOP::Mov64R),
            "Abs64R" => Ok(MirOP::Abs64R),
            "CLS64" => Ok(MirOP::CLS64),
            "CLZ64" => Ok(MirOP::CLZ64),
            "CNT64" => Ok(MirOP::CNT64),
            "CTZ64" => Ok(MirOP::CTZ64),
            "RBit64" => Ok(MirOP::RBit64),
            "Neg32R" => Ok(MirOP::Neg32R),
            "MVN32R" => Ok(MirOP::MVN32R),
            "Mov32R" => Ok(MirOP::Mov32R),
            "Abs32R" => Ok(MirOP::Abs32R),
            "CLS32" => Ok(MirOP::CLS32),
            "CLZ32" => Ok(MirOP::CLZ32),
            "CNT32" => Ok(MirOP::CNT32),
            "CTZ32" => Ok(MirOP::CTZ32),
            "RBit32" => Ok(MirOP::RBit32),
            "SXTB32" => Ok(MirOP::SXTB32),
            "SXTH32" => Ok(MirOP::SXTH32),
            "SXTW32" => Ok(MirOP::SXTW32),
            "UXTB32" => Ok(MirOP::UXTB32),
            "UXTH32" => Ok(MirOP::UXTH32),
            "SXTB64" => Ok(MirOP::SXTB64),
            "SXTH64" => Ok(MirOP::SXTH64),
            "SXTW64" => Ok(MirOP::SXTW64),
            "UXTB64" => Ok(MirOP::UXTB64),
            "UXTH64" => Ok(MirOP::UXTH64),
            "Mov64I" => Ok(MirOP::Mov64I),
            "MovZ64" => Ok(MirOP::MovZ64),
            "MovN64" => Ok(MirOP::MovN64),
            "MovK64" => Ok(MirOP::MovK64),
            "Mov32I" => Ok(MirOP::Mov32I),
            "MovZ32" => Ok(MirOP::MovZ32),
            "MovN32" => Ok(MirOP::MovN32),
            "MovK32" => Ok(MirOP::MovK32),
            "AdrP" => Ok(MirOP::AdrP),
            "Adr" => Ok(MirOP::Adr),
            "FMovFG64" => Ok(MirOP::FMovFG64),
            "SCvtF64" => Ok(MirOP::SCvtF64),
            "UCvtF64" => Ok(MirOP::UCvtF64),
            "FMovGF64" => Ok(MirOP::FMovGF64),
            "FCvtAS64" => Ok(MirOP::FCvtAS64),
            "FCvtAU64" => Ok(MirOP::FCvtAU64),
            "FCvtMS64" => Ok(MirOP::FCvtMS64),
            "FCvtMU64" => Ok(MirOP::FCvtMU64),
            "FCvtNS64" => Ok(MirOP::FCvtNS64),
            "FCvtNU64" => Ok(MirOP::FCvtNU64),
            "FCvtPS64" => Ok(MirOP::FCvtPS64),
            "FCvtPU64" => Ok(MirOP::FCvtPU64),
            "FCvtZS64" => Ok(MirOP::FCvtZS64),
            "FCvtZU64" => Ok(MirOP::FCvtZU64),
            "SCvtF64G32" => Ok(MirOP::SCvtF64G32),
            "UCvtF64G32" => Ok(MirOP::UCvtF64G32),
            "FMovFG32" => Ok(MirOP::FMovFG32),
            "SCvtF32" => Ok(MirOP::SCvtF32),
            "UCvtF32" => Ok(MirOP::UCvtF32),
            "SCvtF32G64" => Ok(MirOP::SCvtF32G64),
            "UCvtF32G64" => Ok(MirOP::UCvtF32G64),
            "FMovGF32" => Ok(MirOP::FMovGF32),
            "FCvtAS32" => Ok(MirOP::FCvtAS32),
            "FCvtAU32" => Ok(MirOP::FCvtAU32),
            "FCvtMS32" => Ok(MirOP::FCvtMS32),
            "FCvtMU32" => Ok(MirOP::FCvtMU32),
            "FCvtNS32" => Ok(MirOP::FCvtNS32),
            "FCvtNU32" => Ok(MirOP::FCvtNU32),
            "FCvtPS32" => Ok(MirOP::FCvtPS32),
            "FCvtPU32" => Ok(MirOP::FCvtPU32),
            "FCvtZS32" => Ok(MirOP::FCvtZS32),
            "FCvtZU32" => Ok(MirOP::FCvtZU32),
            "FCvtAS64F32" => Ok(MirOP::FCvtAS64F32),
            "FCvtAU64F32" => Ok(MirOP::FCvtAU64F32),
            "FCvtMS64F32" => Ok(MirOP::FCvtMS64F32),
            "FCvtMU64F32" => Ok(MirOP::FCvtMU64F32),
            "FCvtNS64F32" => Ok(MirOP::FCvtNS64F32),
            "FCvtNU64F32" => Ok(MirOP::FCvtNU64F32),
            "FCvtPS64F32" => Ok(MirOP::FCvtPS64F32),
            "FCvtPU64F32" => Ok(MirOP::FCvtPU64F32),
            "FCvtZS64F32" => Ok(MirOP::FCvtZS64F32),
            "FCvtZU64F32" => Ok(MirOP::FCvtZU64F32),
            "FCvtAS32F64" => Ok(MirOP::FCvtAS32F64),
            "FCvtAU32F64" => Ok(MirOP::FCvtAU32F64),
            "FMov64R" => Ok(MirOP::FMov64R),
            "FRIntA64" => Ok(MirOP::FRIntA64),
            "FRIntI64" => Ok(MirOP::FRIntI64),
            "FRIntM64" => Ok(MirOP::FRIntM64),
            "FRIntN64" => Ok(MirOP::FRIntN64),
            "FRIntP64" => Ok(MirOP::FRIntP64),
            "FRIntX64" => Ok(MirOP::FRIntX64),
            "FRIntZ64" => Ok(MirOP::FRIntZ64),
            "FRInt32X64" => Ok(MirOP::FRInt32X64),
            "FRIntZ32X64" => Ok(MirOP::FRIntZ32X64),
            "FRInt64X64" => Ok(MirOP::FRInt64X64),
            "FRIntZ64X64" => Ok(MirOP::FRIntZ64X64),
            "FAbs64" => Ok(MirOP::FAbs64),
            "FNeg64" => Ok(MirOP::FNeg64),
            "FSqrt64" => Ok(MirOP::FSqrt64),
            "FMov32R" => Ok(MirOP::FMov32R),
            "FRIntA32" => Ok(MirOP::FRIntA32),
            "FRIntI32" => Ok(MirOP::FRIntI32),
            "FRIntM32" => Ok(MirOP::FRIntM32),
            "FRIntN32" => Ok(MirOP::FRIntN32),
            "FRIntP32" => Ok(MirOP::FRIntP32),
            "FRIntX32" => Ok(MirOP::FRIntX32),
            "FRIntZ32" => Ok(MirOP::FRIntZ32),
            "FRInt32X32" => Ok(MirOP::FRInt32X32),
            "FRIntZ32X32" => Ok(MirOP::FRIntZ32X32),
            "FRInt64X32" => Ok(MirOP::FRInt64X32),
            "FRIntZ64X32" => Ok(MirOP::FRIntZ64X32),
            "FAbs32" => Ok(MirOP::FAbs32),
            "FNeg32" => Ok(MirOP::FNeg32),
            "FSqrt32" => Ok(MirOP::FSqrt32),
            "FCvt32F64" => Ok(MirOP::FCvt32F64),
            "FCvt64F32" => Ok(MirOP::FCvt64F32),
            "FMov64I" => Ok(MirOP::FMov64I),
            "FMov32I" => Ok(MirOP::FMov32I),
            "MAdd64" => Ok(MirOP::MAdd64),
            "MSub64" => Ok(MirOP::MSub64),
            "SMAddL" => Ok(MirOP::SMAddL),
            "SMSubL" => Ok(MirOP::SMSubL),
            "UMAddL" => Ok(MirOP::UMAddL),
            "UMSubL" => Ok(MirOP::UMSubL),
            "MAdd32" => Ok(MirOP::MAdd32),
            "MSub32" => Ok(MirOP::MSub32),
            "FMAdd64" => Ok(MirOP::FMAdd64),
            "FMSub64" => Ok(MirOP::FMSub64),
            "FNMAdd64" => Ok(MirOP::FNMAdd64),
            "FNMSub64" => Ok(MirOP::FNMSub64),
            "FMAdd32" => Ok(MirOP::FMAdd32),
            "FMSub32" => Ok(MirOP::FMSub32),
            "FNMAdd32" => Ok(MirOP::FNMAdd32),
            "FNMSub32" => Ok(MirOP::FNMSub32),
            "LdrGr64" => Ok(MirOP::LdrGr64),
            "LdrBGr64" => Ok(MirOP::LdrBGr64),
            "LdrHGr64" => Ok(MirOP::LdrHGr64),
            "LdrSBGr64" => Ok(MirOP::LdrSBGr64),
            "LdrSHGr64" => Ok(MirOP::LdrSHGr64),
            "StrGr64" => Ok(MirOP::StrGr64),
            "StrBGr64" => Ok(MirOP::StrBGr64),
            "StrHGr64" => Ok(MirOP::StrHGr64),
            "LdrGr32" => Ok(MirOP::LdrGr32),
            "LdrBGr32" => Ok(MirOP::LdrBGr32),
            "LdrHGr32" => Ok(MirOP::LdrHGr32),
            "LdrSBGr32" => Ok(MirOP::LdrSBGr32),
            "LdrSHGr32" => Ok(MirOP::LdrSHGr32),
            "StrGr32" => Ok(MirOP::StrGr32),
            "StrBGr32" => Ok(MirOP::StrBGr32),
            "StrHGr32" => Ok(MirOP::StrHGr32),
            "LdrF64" => Ok(MirOP::LdrF64),
            "StrF64" => Ok(MirOP::StrF64),
            "LdrF32" => Ok(MirOP::LdrF32),
            "StrF32" => Ok(MirOP::StrF32),
            "LdrGr64Base" => Ok(MirOP::LdrGr64Base),
            "LdrBGr64Base" => Ok(MirOP::LdrBGr64Base),
            "LdrHGr64Base" => Ok(MirOP::LdrHGr64Base),
            "LdrSBGr64Base" => Ok(MirOP::LdrSBGr64Base),
            "LdrSHGr64Base" => Ok(MirOP::LdrSHGr64Base),
            "StrGr64Base" => Ok(MirOP::StrGr64Base),
            "StrBGr64Base" => Ok(MirOP::StrBGr64Base),
            "StrHGr64Base" => Ok(MirOP::StrHGr64Base),
            "LdrGr32Base" => Ok(MirOP::LdrGr32Base),
            "LdrBGr32Base" => Ok(MirOP::LdrBGr32Base),
            "LdrHGr32Base" => Ok(MirOP::LdrHGr32Base),
            "LdrSBGr32Base" => Ok(MirOP::LdrSBGr32Base),
            "LdrSHGr32Base" => Ok(MirOP::LdrSHGr32Base),
            "StrGr32Base" => Ok(MirOP::StrGr32Base),
            "StrBGr32Base" => Ok(MirOP::StrBGr32Base),
            "StrHGr32Base" => Ok(MirOP::StrHGr32Base),
            "LdrF64Base" => Ok(MirOP::LdrF64Base),
            "StrF64Base" => Ok(MirOP::StrF64Base),
            "LdrF32Base" => Ok(MirOP::LdrF32Base),
            "StrF32Base" => Ok(MirOP::StrF32Base),
            "LdrGr64Indexed" => Ok(MirOP::LdrGr64Indexed),
            "LdrBGr64Indexed" => Ok(MirOP::LdrBGr64Indexed),
            "LdrHGr64Indexed" => Ok(MirOP::LdrHGr64Indexed),
            "LdrSBGr64Indexed" => Ok(MirOP::LdrSBGr64Indexed),
            "LdrSHGr64Indexed" => Ok(MirOP::LdrSHGr64Indexed),
            "StrGr64Indexed" => Ok(MirOP::StrGr64Indexed),
            "StrBGr64Indexed" => Ok(MirOP::StrBGr64Indexed),
            "StrHGr64Indexed" => Ok(MirOP::StrHGr64Indexed),
            "LdrGr32Indexed" => Ok(MirOP::LdrGr32Indexed),
            "LdrBGr32Indexed" => Ok(MirOP::LdrBGr32Indexed),
            "LdrHGr32Indexed" => Ok(MirOP::LdrHGr32Indexed),
            "LdrSBGr32Indexed" => Ok(MirOP::LdrSBGr32Indexed),
            "LdrSHGr32Indexed" => Ok(MirOP::LdrSHGr32Indexed),
            "StrGr32Indexed" => Ok(MirOP::StrGr32Indexed),
            "StrBGr32Indexed" => Ok(MirOP::StrBGr32Indexed),
            "StrHGr32Indexed" => Ok(MirOP::StrHGr32Indexed),
            "LdrF64Indexed" => Ok(MirOP::LdrF64Indexed),
            "StrF64Indexed" => Ok(MirOP::StrF64Indexed),
            "LdrF32Indexed" => Ok(MirOP::LdrF32Indexed),
            "StrF32Indexed" => Ok(MirOP::StrF32Indexed),
            "LdrGr64Literal" => Ok(MirOP::LdrGr64Literal),
            "LdrBGr64Literal" => Ok(MirOP::LdrBGr64Literal),
            "LdrHGr64Literal" => Ok(MirOP::LdrHGr64Literal),
            "LdrSBGr64Literal" => Ok(MirOP::LdrSBGr64Literal),
            "LdrSHGr64Literal" => Ok(MirOP::LdrSHGr64Literal),
            "StrGr64Literal" => Ok(MirOP::StrGr64Literal),
            "StrBGr64Literal" => Ok(MirOP::StrBGr64Literal),
            "StrHGr64Literal" => Ok(MirOP::StrHGr64Literal),
            "LdrGr32Literal" => Ok(MirOP::LdrGr32Literal),
            "LdrBGr32Literal" => Ok(MirOP::LdrBGr32Literal),
            "LdrHGr32Literal" => Ok(MirOP::LdrHGr32Literal),
            "LdrSBGr32Literal" => Ok(MirOP::LdrSBGr32Literal),
            "LdrSHGr32Literal" => Ok(MirOP::LdrSHGr32Literal),
            "StrGr32Literal" => Ok(MirOP::StrGr32Literal),
            "StrBGr32Literal" => Ok(MirOP::StrBGr32Literal),
            "StrHGr32Literal" => Ok(MirOP::StrHGr32Literal),
            "LdrF64Literal" => Ok(MirOP::LdrF64Literal),
            "StrF64Literal" => Ok(MirOP::StrF64Literal),
            "LdrF32Literal" => Ok(MirOP::LdrF32Literal),
            "StrF32Literal" => Ok(MirOP::StrF32Literal),
            "LoadConst64" => Ok(MirOP::LoadConst64),
            "LoadConstF64" => Ok(MirOP::LoadConstF64),
            "LoadConst64Symbol" => Ok(MirOP::LoadConst64Symbol),
            "MirCall" => Ok(MirOP::MirCall),
            "MirReturn" => Ok(MirOP::MirReturn),
            "MirSwitch" => Ok(MirOP::MirSwitch),
            _ => Err(format!("Unknown opcode: {}", s)),
        }
    }
}
